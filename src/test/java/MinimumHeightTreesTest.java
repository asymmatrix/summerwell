import java.util.Arrays;
import java.util.Collection;
import java.util.List;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.junit.runners.Parameterized;

import static org.junit.Assert.*;

@RunWith(Parameterized.class)
public class MinimumHeightTreesTest {
  @Parameterized.Parameter()
  public int n;

  @Parameterized.Parameter(1)
  public int[][] edge;

  @Parameterized.Parameter(2)
  public int[] expectedResult;

  @Test
  public void test_shortestPathFloyd() {
    MinimumHeightTrees_ShortestPathFloyd testTarget = new MinimumHeightTrees_ShortestPathFloyd();
    List<Integer> actual = testTarget.findMinHeightTrees(n, edge);
    int[] actualArray = actual.stream().mapToInt(i->i).toArray();
    assertArrayEquals(expectedResult, actualArray);
  }

  @Test
  public void test_topoSort() {
    MinimumHeightTrees_TopoSort testTarget = new MinimumHeightTrees_TopoSort();
    List<Integer> actual = testTarget.findMinHeightTrees(n, edge);
    int[] actualArray = actual.stream().mapToInt(i->i).toArray();
    assertArrayEquals(expectedResult, actualArray);
  }

  @Parameterized.Parameters
  public static Collection<Object[]> data() {
    return Arrays.asList(new Object[][]{
        {
            1,
            new int[][] {},
            new int[] {0}
        },
        {
            6,
            new int[][] {{0, 3}, {1, 3}, {2, 3}, {4, 3}, {5, 4}},
            new int[] {3, 4}
        },
        {
          6,
          new int[][] {{0, 1}, {0, 2}, {0, 3}, {3, 4}, {4, 5}},
          new int[] {3}
        },
        {
          404,
          new int[][] {{0,1}, {0,2}, {1,3}, {1,4}, {2,5}, {3,6}, {1,7}, {1,8}, {7,9}, {1,10}, {3,11}, {2,12}, {8,13}, {13,14}, {1,15}, {12,16}, {15,17}, {13,18}, {13,19}, {11,20}, {14,21}, {10,22}, {20,23}, {17,24}, {4,25}, {5,26}, {25,27}, {5,28}, {9,29}, {17,30}, {29,31}, {24,32}, {24,33}, {28,34}, {3,35}, {29,36}, {12,37}, {0,38}, {3,39}, {37,40}, {29,41}, {29,42}, {24,43}, {10,44}, {1,45}, {12,46}, {43,47}, {31,48}, {16,49}, {45,50}, {7,51}, {3,52}, {6,53}, {2,54}, {25,55}, {28,56}, {22,57}, {18,58}, {18,59}, {3,60}, {32,61}, {47,62}, {29,63}, {39,64}, {18,65}, {30,66}, {1,67}, {23,68}, {15,69}, {64,70}, {26,71}, {50,72}, {8,73}, {17,74}, {2,75}, {67,76}, {75,77}, {48,78}, {73,79}, {34,80}, {16,81}, {71,82}, {76,83}, {72,84}, {8,85}, {34,86}, {5,87}, {12,88}, {31,89}, {84,90}, {15,91}, {19,92}, {18,93}, {42,94}, {16,95}, {31,96}, {96,97}, {92,98}, {20,99}, {16,100}, {54,101}, {90,102}, {77,103}, {46,104}, {42,105}, {83,106}, {51,107}, {60,108}, {14,109}, {55,110}, {86,111}, {62,112}, {36,113}, {21,114}, {113,115}, {15,116}, {107,117}, {25,118}, {59,119}, {93,120}, {53,121}, {2,122}, {86,123}, {9,124}, {30,125}, {40,126}, {122,127}, {102,128}, {117,129}, {1,130}, {4,131}, {16,132}, {112,133}, {40,134}, {9,135}, {102,136}, {112,137}, {55,138}, {27,139}, {136,140}, {138,141}, {95,142}, {89,143}, {102,144}, {103,145}, {76,146}, {42,147}, {58,148}, {85,149}, {72,150}, {91,151}, {116,152}, {115,153}, {78,154}, {46,155}, {133,156}, {16,157}, {148,158}, {125,159}, {104,160}, {2,161}, {46,162}, {21,163}, {76,164}, {102,165}, {49,166}, {84,167}, {85,168}, {134,169}, {126,170}, {165,171}, {149,172}, {110,173}, {37,174}, {110,175}, {127,176}, {39,177}, {78,178}, {152,179}, {34,180}, {126,181}, {69,182}, {77,183}, {132,184}, {115,185}, {56,186}, {70,187}, {96,188}, {160,189}, {16,190}, {85,191}, {39,192}, {54,193}, {11,194}, {39,195}, {174,196}, {10,197}, {43,198}, {53,199}, {16,200}, {124,201}, {94,202}, {68,203}, {30,204}, {85,205}, {204,206}, {53,207}, {28,208}, {143,209}, {83,210}, {5,211}, {88,212}, {164,213}, {50,214}, {96,215}, {43,216}, {34,217}, {46,218}, {86,219}, {160,220}, {201,221}, {189,222}, {184,223}, {124,224}, {110,225}, {101,226}, {171,227}, {80,228}, {135,229}, {225,230}, {169,231}, {66,232}, {138,233}, {47,234}, {149,235}, {59,236}, {106,237}, {208,238}, {148,239}, {114,240}, {155,241}, {24,242}, {168,243}, {158,244}, {52,245}, {240,246}, {155,247}, {138,248}, {30,249}, {50,250}, {46,251}, {230,252}, {218,253}, {140,254}, {132,255}, {52,256}, {85,257}, {216,258}, {43,259}, {216,260}, {152,261}, {84,262}, {103,263}, {80,264}, {254,265}, {138,266}, {80,267}, {51,268}, {193,269}, {118,270}, {16,271}, {260,272}, {80,273}, {253,274}, {132,275}, {34,276}, {259,277}, {14,278}, {28,279}, {167,280}, {219,281}, {234,282}, {138,283}, {3,284}, {211,285}, {239,286}, {206,287}, {57,288}, {213,289}, {258,290}, {172,291}, {128,292}, {51,293}, {106,294}, {208,295}, {13,296}, {250,297}, {21,298}, {197,299}, {100,300}, {221,301}, {233,302}, {77,303}, {55,304}, {124,305}, {23,306}, {266,307}, {46,308}, {127,309}, {60,310}, {261,311}, {166,312}, {252,313}, {207,314}, {76,315}, {249,316}, {66,317}, {121,318}, {157,319}, {106,320}, {39,321}, {152,322}, {110,323}, {150,324}, {114,325}, {106,326}, {245,327}, {70,328}, {172,329}, {72,330}, {286,331}, {321,332}, {174,333}, {123,334}, {36,335}, {318,336}, {1,337}, {80,338}, {203,339}, {272,340}, {240,341}, {19,342}, {138,343}, {202,344}, {128,345}, {167,346}, {312,347}, {265,348}, {119,349}, {334,350}, {210,351}, {129,352}, {140,353}, {280,354}, {274,355}, {308,356}, {323,357}, {226,358}, {262,359}, {270,360}, {29,361}, {289,362}, {19,363}, {162,364}, {254,365}, {20,366}, {177,367}, {334,368}, {150,369}, {110,370}, {322,371}, {338,372}, {36,373}, {24,374}, {177,375}, {112,376}, {152,377}, {334,378}, {132,379}, {248,380}, {162,381}, {59,382}, {346,383}, {99,384}, {61,385}, {299,386}, {42,387}, {384,388}, {379,389}, {290,390}, {339,391}, {58,392}, {203,393}, {276,394}, {203,395}, {299,396}, {56,397}, {121,398}, {124,399}, {155,400}, {339,401}, {278,402}, {267,403}},
          new int[] {45}
        }
    });
  }
}
